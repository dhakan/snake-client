{"version":3,"sources":["src/index.js","src/objects/BodyPart.js","src/objects/Game.js","src/objects/Player.js","src/objects/RainbowText.js","src/states/BootState.js","src/states/GameState.js","src/states/LoadState.js"],"names":["BodyPart","game","x","y","width","height","Sprite","Game","AUTO","state","add","start","PLAYER_MOVEMENT_SPEED","directions","UP","DOWN","RIGHT","LEFT","Player","gridSize","_gridSize","_direction","expandBody","bodyPart","newDirection","console","log","Group","RainbowText","text","font","fill","align","_speed","_colorIndex","_colors","colorize","startTimer","stage","addChild","time","events","loop","timer","i","length","addColor","Phaser","Text","BootState","physics","startSystem","Physics","ARCADE","setBackgroundColor","State","GameState","load","image","_player","_cursors","input","keyboard","createCursorKeys","left","isDown","setDirection","right","up","down","move","LoadState","scale","fullScreenScaleMode","ScaleManager","EXACT_FIT"],"mappings":"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","file":"public/js/app.js","sourcesContent":["import Game from 'src/objects/Game';\n\nnew Game();\n","import Phaser from 'phaser';\n\nclass BodyPart extends Phaser.Sprite {\n\n    constructor(game, x, y) {\n        super(game, x, y,'square');\n\n        this.width = x;\n        this.height = y;\n    }\n}\n\nexport default BodyPart;","import BootState from '../states/BootState';\nimport LoadState from '../states/LoadState';\nimport GameState from '../states/GameState';\nimport Phaser from 'phaser';\n\n\nclass Game extends Phaser.Game {\n\n    constructor() {\n        super(500, 500, Phaser.AUTO, 'content', null);\n        this.state.add('BootState', BootState, false);\n        this.state.add('LoadState', LoadState, false);\n        this.state.add('GameState', GameState, false);\n        this.state.start('BootState');\n    }\n}\n\nGame.PLAYER_MOVEMENT_SPEED = 1;\nGame.directions = {\n    UP: 'up',\n    DOWN: 'down',\n    RIGHT: 'right',\n    LEFT: 'left'\n};\n\nexport default Game;","import Phaser from 'phaser';\nimport BodyPart from './BodyPart';\nimport Game from './Game';\n\nclass Player extends Phaser.Group {\n\n    constructor(game, gridSize) {\n        super(game);\n\n        this._gridSize = gridSize;\n        this._direction = 'right';\n        this.expandBody();\n    }\n\n    expandBody() {\n        const bodyPart = new BodyPart(this.game, this._gridSize.width, this._gridSize.height);\n        this.add(bodyPart);\n    }\n\n    setDirection(newDirection) {\n        this._direction = newDirection;\n    }\n\n    move() {\n        console.log('move');\n\n        if (this._direction === Game.directions.LEFT) {\n            this.x += -Game.PLAYER_MOVEMENT_SPEED;\n        } else if (this._direction === Game.directions.RIGHT) {\n            this.x += Game.PLAYER_MOVEMENT_SPEED;\n        } else if (this._direction === Game.directions.UP) {\n            this.y += -Game.PLAYER_MOVEMENT_SPEED;\n        } else {\n            this.y += Game.PLAYER_MOVEMENT_SPEED;\n        }\n    }\n}\n\nexport default Player;","class RainbowText extends Phaser.Text {\n\n    constructor(game, x, y, text) {\n\n        super(game, x, y, text, {font: \"45px Arial\", fill: \"#ff0044\", align: \"center\"});\n\n        this._speed = 10; //ms\n        this._colorIndex = 0;\n        this._colors = ['#ee4035', '#f37736', '#fdf498', '#7bc043', '#0392cf'];\n\n        this.colorize();\n        this.startTimer();\n\n        this.game.stage.addChild(this);\n\n    }\n\n    startTimer() {\n        //this.game.time.events.loop(this._speed, this.colorize, this).timer.start();\n        this.game.time.events.loop(this._speed, this.log, this).timer.start();\n    }\n\n    log() {\n        console.log('haha')\n    }\n\n    colorize() {\n\n        for (let i = 0; i < this.text.length; i++) {\n\n            if (this._colorIndex === this._colors.length) {\n                this._colorIndex = 0;\n            }\n\n            this.addColor(this._colors[this._colorIndex], i);\n            this._colorIndex++;\n\n        }\n\n    }\n\n}\n\nexport default RainbowText;","import Phaser from 'phaser';\n\nclass BootState extends Phaser.State {\n\n    preload() {\n        /*\n         Load all game assets\n         Place your load bar, some messages.\n         In this case of loading, only text is placed...\n         */\n\n        //Load your images, spritesheets, bitmaps...\n\n\n        //Load your sounds, efx, music...\n        //Example: game.load.audio('rockas', 'assets/snd/rockas.wav');\n\n        //Load your data, JSON, Querys...\n        //Example: game.load.json('version', 'http://phaser.io/version.json');\n    }\n\n    create() {\n        console.log('Entered boot state');\n        //Initial GameSystem (Arcade, P2, Ninja)\n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\n\n        this.game.stage.setBackgroundColor('#dedede');\n\n        //Initial Load State\n        this.game.state.start('LoadState');\n    }\n}\n\nexport default BootState;","import Player from '../objects/Player';\nimport Phaser from 'phaser';\nimport Game from '../objects/Game';\n\nclass GameState extends Phaser.State {\n\n    preload() {\n        this.game.load.image('square', 'images/square.png');\n        this.game.load.image('fruit', 'images/fruit.png');\n    }\n\n    create() {\n        console.log('Entered game state!');\n\n        const gridSize = {\n                width: 10,\n                height: 10\n            };\n\n        this._player = new Player(this.game, gridSize);\n\n        this._cursors = this.game.input.keyboard.createCursorKeys();\n    }\n\n    update() {\n        console.log('Update function');\n\n        if (this._cursors.left.isDown) {\n            this._player.setDirection(Game.directions.LEFT);\n        } else if (this._cursors.right.isDown) {\n            this._player.setDirection(Game.directions.RIGHT);\n        } else if (this._cursors.up.isDown) {\n            this._player.setDirection(Game.directions.UP);\n        } else if (this._cursors.down.isDown) {\n            this._player.setDirection(Game.directions.DOWN);\n        }\n\n        this._player.move();\n    }\n\n}\n\nexport default GameState;\n","import Phaser from 'phaser';\n\nclass LoadState extends Phaser.State {\n\n    preload() {\n        /*\n         Load all game assets\n         Place your load bar, some messages.\n         In this case of loading, only text is placed...\n         */\n\n        //Load your images, spritesheets, bitmaps...\n\n\n        //Load your sounds, efx, music...\n        //Example: game.load.audio('rockas', 'assets/snd/rockas.wav');\n\n        //Load your data, JSON, Querys...\n        //Example: game.load.json('version', 'http://phaser.io/version.json');\n    }\n\n    create() {\n        console.log('Entered load!');\n        this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;\n        this.game.state.start('GameState');\n    }\n}\n\nexport default LoadState;"]}